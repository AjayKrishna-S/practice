

            //Contructors, default constructors, parameterized constructors

            -------------------------------------------------------------

            //This & Super

class A                     // A (super) class //every class in java has "extends Object" as a super class
{
    public A()            // Default Constructoe    // every constructor has "super();" method even it's not metioned.
    {
        super();
        System.out.println("in A");
    }

    public A(int n)         // Parameterize Constructoe
    {
        System.out.println("in A int");
    }
}

class B extends A       // B Sub class
{

    public B()
    {   
        super();
        System.out.println("in B");
    }

    public B(int  n)          // Parameterize Constructoe
    {
        this();               // this(); will call constructor of same class - (B())      
        System.out.println("in B int");
    }
}



public class Notes
{

    public static void main(String args[])
    {

        B obj = new B(5);
    }
}


--------------------------------------------------------------



class A
{
    public A()
    {
        System.out.println("object created");
    }

    public void show()
    {
        System.out.println("in A show");
    }
}


public class Notes
{

    public static void main(String args[])
    {

       // Naming Convention

            // Class and Interface - Calc, Runable
            // variable and method - marks, show()
            // constants - PIE, BRAND

       //camel casing

            //showMyMark();
            //MyData

        // Human() - contructor


        new A();         // when use this it creates new object in heap memory
        new A().show(); // anonymous onject
        
    }
}

----------------------------------------------------------------------------

                    //OOPS
        //Inheritance
        // JAVA does't allow multible inheritance( becouse of amiguity)



        class Calc
        {
        public int add(int n1, int n2)
        {
        return n1 + n2;
        }
        public int sub(int n1, int n2)
        {
        return n1 - n2;
        }
        }

        class AdvCalc extends Calc
        {
        public int multi(int n1, int n2)
        {
        return n1 * n2;
        }

        public int div(int n1, int n2)
        {
        return n1 / n2;
        }
        }
        class SupCalc extends AdvCalc
        {
        public double power(int n1, int n2)
        {
        return Math.pow(n1, n2);
        }
        }


        public class Notes
        {

        public static void main(String args[])
        {

        SupCalc obj = new SupCalc();
        int r = obj.add(5, 7);
        int r2 = obj.sub(2, 4);
        int r3 = obj.multi(2, 7);
        int r4 = obj.div(5, 4);
        double r5 = obj.power(10, 2);

        System.out.println(" output : " + r +" : "+ r2 +" : "+ r3 +" : "+ r4 +" : "+ r5);
        }
        }

-----------------------------------------------------------------------------


//packages

packages com.toos;
java.lan.* for select all files
package shout be unicq

---------------------------------------------------------------------------------
 // access modifiers

 //polimarisum

 //final key word
    variable - when using final we cannot change the value(constants)
    method - it avoids methos over writing(avid inheritance)
    class - cannot use extends class.
----------------------------------------------------------------------------------

//object class 7:22
    //in java every class extends the object